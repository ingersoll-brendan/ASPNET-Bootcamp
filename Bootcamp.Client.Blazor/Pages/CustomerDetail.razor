@page "/customers/edit/{id:int}"
@using Bootcamp.Client.Blazor.Services
@using Bootcamp.Data.Entities
@using Bootcamp.Client.Blazor.Config;
@inject NavigationManager NavManager
<h3>Customer Details</h3>

@if(Customer == null)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm Model="@Customer">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="row">
            <div class="form-group col-12 col-md-6 mb-3">
                <label for="customerFirstName">First Name</label>
                <InputText class="form-control" id="customerFirstName" @bind-Value="Customer!.FirstName" />
            </div>

            <div class="form-group col-12 col-md-6 mb-3">
                <label for="customerLastName">Last Name</label>
                <InputText class="form-control" id="customerLastName" @bind-Value="Customer!.LastName" />
            </div>
        </div>
        <div class="row">
            <div class="form-group col-12 col-md-6 mb-3">
                <label for="customerEmail">Email</label>
                <InputText class="form-control" id="customerEmail" @bind-Value="Customer!.Email" />
            </div>

            <div class="form-group col-12 col-md-6 mb-3">
                <label for="customerPhoneNumber">Phone Number</label>
                <InputNumber class="form-control" id="customerPhoneNumber" @bind-Value="Customer!.PhoneNumber" />
            </div>
        </div>
    </EditForm>

    <br />
    <button class="btn btn-primary" @onclick="this.SaveCustomer">Save</button>
    <button class="btn border" @onclick="this.GoBack">Back</button>
    <button class="btn btn-danger" @onclick="this.DeleteCustomer">Delete</button>
}



@code {
    [Parameter] public int? Id { get; set; }
    private Customer? Customer { get; set; }

    [Inject]
    public CustomerService CustomerService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        if(this.Id == null)
        {
            // If no ID is provided, we are creating a new customer
            this.Customer = new Customer();
            return;
        }
        else
        {
            this.Customer = await this.CustomerService.GetCustomerAsync(this.Id!.Value);
        }
    }

    public async Task SaveCustomer()
    {
        if (this.Customer == null)
        {
            return;
        }

        if(this.Id == null)
        {
            // Create a new customer
            // TODO: This usually returns an Id or the entire entity/object with the new Id set
            this.Customer = await this.CustomerService.AddCustomerAsync(this.Customer);
        }
        else
        {
            // Update an existing customer
            await this.CustomerService.UpdateCustomerAsync(this.Customer);
        }
    }

    public async void DeleteCustomer()
    {
        if (this.Customer == null)
        {
            return;
        }

        if(this.Id == null)
        {
            return;
        }
        else
        {
            await this.CustomerService.DeleteCustomerAsync(this.Id!.Value);
            this.GoBack();
        }
    }

    public void GoBack()
    {
        NavManager.NavigateTo("/customers");
    }
}
